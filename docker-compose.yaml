version: '3.8'

services:
  # üê¨ MySQL para usuarios-service
  mysql_db:
    image: mysql:8.0
    container_name: mysql_Sistema_Turnos
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: db_mysql_main
      MYSQL_USER: usuario_app
      MYSQL_PASSWORD: password_app
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - micro-net

  # üêò PostgreSQL para ordenes-service
  postgres_ordenes:
    image: postgres:15
    container_name: postgres_ordenes_service
    environment:
      POSTGRES_DB: ordenes_db
      POSTGRES_USER: ordenes_user
      POSTGRES_PASSWORD: ordenes_pass
    ports:
      - "5432:5432"
    volumes:
      - pgdata_ordenes:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - micro-net

  # üêò PostgreSQL para administracion-service
  postgres_administracion:
    image: postgres:15
    container_name: postgres_administracion_service
    environment:
      POSTGRES_DB: administraciondb
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: admin_pass
    ports:
      - "5433:5432"
    volumes:
      - pgdata_admin:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - micro-net

  # ‚öôÔ∏è Config Server
  microservice-config:
    build:
      context: .
      dockerfile: microservice-config/Dockerfile
    container_name: config_service
    ports:
      - "8888:8888"
    restart: unless-stopped
    networks:
      - micro-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Eureka
  eureka-service:
    build:
      context: .
      dockerfile: microservicio-eureka/Dockerfile
    container_name: eureka_service
    ports:
      - "8761:8761"
    depends_on:
      microservice-config:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - micro-net

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: microservicio-gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "8080:8080"
    depends_on:
      microservice-config:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - micro-net

  # üßæ Servicio de administraci√≥n
  administracion-service:
    build:
      context: .
      dockerfile: administracion-service/Dockerfile
    container_name: administracion_service
    ports:
      - "8081:8081"
    environment:
      - CONFIG_SERVER_URL=http://microservice-config:8888
    depends_on:
      - microservice-config
      - eureka-service
      - postgres_administracion
    restart: unless-stopped
    networks:
      - micro-net

  # üì¶ Servicio de √≥rdenes
  ordenes-service:
    build:
      context: .
      dockerfile: ordenes-service/Dockerfile
    container_name: ordenes_service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_ordenes:5432/ordenes_db
      SPRING_DATASOURCE_USERNAME: ordenes_user
      SPRING_DATASOURCE_PASSWORD: ordenes_pass
      SPRING_PROFILES_ACTIVE: default
    restart: unless-stopped
    networks:
      - micro-net

  # Servicio de usuarios
  usuarios-service:
    build:
      context: .
      dockerfile: usuarios-service/Dockerfile
    container_name: usuarios_service
    ports:
      - "8082:8082"
    depends_on:
      - microservice-config
      - eureka-service
      - mysql_db
    restart: unless-stopped
    networks:
      - micro-net

volumes:
  mysql_data:
  pgdata_ordenes:
  pgdata_admin:

networks:
  micro-net: